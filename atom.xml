<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小康-技术博客</title>
  
  
  <link href="https://codeslive.top/atom.xml" rel="self"/>
  
  <link href="https://codeslive.top/"/>
  <updated>2023-05-26T12:44:03.710Z</updated>
  <id>https://codeslive.top/</id>
  
  <author>
    <name>小康</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript学习笔记</title>
    <link href="https://codeslive.top/2023/05/26/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://codeslive.top/2023/05/26/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-05-26T11:06:31.963Z</published>
    <updated>2023-05-26T12:44:03.710Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装TS"><a href="#1-安装TS" class="headerlink" title="1. 安装TS"></a>1. 安装TS</h3><ol><li>全局安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript@latest -g</span><br></pre></td></tr></table></figure><ol start="2"><li>在根目录下生成 <code>tsconfig.json</code> 文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc  --init</span><br></pre></td></tr></table></figure><p>以上这一步一定是要运行的，否则 <code>vscode</code> 会出现变量错误</p><p><img src="https://static-youdao-note.oss-cn-shenzhen.aliyuncs.com/images/202304221958811.webp?x-oss-process=style/webp"></p><ol start="3"><li>启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -w 文件名</span><br></pre></td></tr></table></figure><h3 id="2-TS的类型声明"><a href="#2-TS的类型声明" class="headerlink" title="2. TS的类型声明"></a>2. TS的类型声明</h3><ol><li>可以把类型用在<code>变量</code>当中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量的使用</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: number = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: string = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><ol start="2"><li>可以把类型用在<code>函数</code>中，如函数的参数、返回值</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数的使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><ol start="3"><li>TS可以用的其他类型</li></ol><p><img src="https://static-youdao-note.oss-cn-shenzhen.aliyuncs.com/images/202304221959617.webp?x-oss-process=style/webp"></p><ol start="4"><li>可以使用 <code>| </code>来连接多个类型 (联合类型)</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="string">&quot;male&quot;</span> | <span class="string">&quot;female&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;male&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;female&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;123&quot;</span> <span class="comment">//这是不行的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean | string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="built_in">boolean</span> | <span class="built_in">string</span>;</span><br><span class="line">c = <span class="literal">true</span>;</span><br><span class="line">c = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><code>any</code>表示默认关闭TS</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//any 表示的是任意类型, 一个变量设置类型为 any 后相当于对该变量关闭TS的类型检测, 使用TS时, 不建议使用 any 类型。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="built_in">any</span>;</span><br><span class="line">d = <span class="number">10</span>;</span><br><span class="line">d = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">d = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果变量后面不加 any, 会自动加上。</span></span><br><span class="line"><span class="keyword">let</span> f;</span><br><span class="line">f = <span class="number">10</span>;</span><br><span class="line">f = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">f = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><ol start="6"><li><code>unknown</code>表示未知类型的值</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unknown 表示未知类型的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="built_in">unknown</span>;</span><br><span class="line">e=<span class="number">10</span>;</span><br><span class="line">e=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">e=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unknown 不能把定义好的类型赋值给 unknown 的变量</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>:<span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">s=e; <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unknown 实际上就是一个类型安全的any</span></span><br><span class="line"><span class="comment">// unknown 类型的变量，不能直接赋值给其他变量</span></span><br><span class="line"><span class="comment">//解决报错 s = e 的办法, 赋值前进行类型检测, 这样就不会报错了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> e === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">  s = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型断言, 可以用来告诉解析器变量的实际类型, 也可以解决 s = e 报错</span></span><br><span class="line">s = e <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">s = &lt;<span class="built_in">string</span>&gt;e;</span><br></pre></td></tr></table></figure><ol start="7"><li><code>void</code>用来表示空</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// void 用来表示空, 一函数为例, 就表示没有返回值的函数, 但可以返回 undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><code>never</code> 表示永远不会返回结果</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// never 表示永远不会返回结果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;报错了! &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li><code>object</code> 表示一个 js 对象</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">object</span>;</span><br><span class="line">a = &#123;&#125;;</span><br><span class="line">a = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;&#125; 用来指定对象中可以包含哪些属性</span></span><br><span class="line"><span class="comment">// 语法：&#123;属性名:属性值, 属性名:属性值&#125;</span></span><br><span class="line"><span class="comment">// 在属性名后边加上?, 表示属性是可选的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>, age?: <span class="built_in">number</span> &#125;;</span><br><span class="line">g = &#123; <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [propName: string]: any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">h</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>, [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;</span><br><span class="line">h = &#123;<span class="attr">name</span>:<span class="string">&#x27;猪八戒&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//比较常用的写法</span></span><br><span class="line"><span class="comment">// [propName: string]: any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">h</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>, [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;</span><br><span class="line">h = &#123; <span class="attr">name</span>: <span class="string">&#x27;猪八戒&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置函数结构的类型声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">j</span>: <span class="function">(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line">j = <span class="keyword">function</span> (<span class="params">n1: <span class="built_in">string</span>, n2: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string 表示字符串数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">v</span>: <span class="built_in">string</span>[];</span><br><span class="line">v = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//number[] 表示数值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">w</span>: <span class="built_in">number</span>[];</span><br><span class="line">w = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">m</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">m = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><ol start="10"><li>元组</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元组就是固定长度的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">h</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>]; <span class="comment">//可以写多个类型</span></span><br><span class="line">h = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">123</span>];</span><br></pre></td></tr></table></figure><ol start="11"><li><code>enum</code>枚举</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">  <span class="title class_">Male</span>,</span><br><span class="line">  <span class="title class_">Female</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">i</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">gender</span>: <span class="title class_">Gender</span> &#125;;</span><br><span class="line">i = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>:<span class="title class_">Gender</span>.<span class="property">Male</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i.<span class="property">gender</span> === <span class="title class_">Gender</span>.<span class="property">Male</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="3-TS的编译选项（tsconfig-json）"><a href="#3-TS的编译选项（tsconfig-json）" class="headerlink" title="3. TS的编译选项（tsconfig.json）"></a>3. TS的编译选项（tsconfig.json）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">      tsconfig.json 是ts编译器的配置文件，ts编译器可以更具它的信息来对代码进行编译</span></span><br><span class="line"><span class="comment">      &quot;include&quot; 用来表示指定哪些ts文件需要被编译</span></span><br><span class="line"><span class="comment">      路径；</span></span><br><span class="line"><span class="comment">          *表示任意文件，</span></span><br><span class="line"><span class="comment">          **表示任意目录</span></span><br><span class="line"><span class="comment">      &quot;exclude&quot; 用来表示不需要被编译的文件目录</span></span><br><span class="line"><span class="comment">              默认值：&#123;&quot;node_modules&quot;, &quot;bower_components&quot;, &quot;jspm_packages&quot;&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">      <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;./src/**/*&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// &quot;exclude&quot;: [</span></span><br><span class="line">      <span class="comment">//     &quot;./src/hello/**/*&quot;</span></span><br><span class="line">      <span class="comment">// ]</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">//compilerOptions 编译器的选项 </span></span><br><span class="line">      <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">          <span class="comment">//target 用来指定ts被编译为ES的版本</span></span><br><span class="line">          <span class="comment">//&#x27;es3&#x27;, &#x27;es5&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;, &#x27;es2018&#x27;, &#x27;es2019&#x27;, &#x27;es2020&#x27;, &#x27;esnext&#x27;.</span></span><br><span class="line">          <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//module 指定要使用的模块化的规范</span></span><br><span class="line">          <span class="comment">//&#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es2020&#x27;, &#x27;esnext&#x27;</span></span><br><span class="line">          <span class="string">&quot;module&quot;</span>: <span class="string">&quot;es2015&quot;</span>,</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//lib 用来指定项目所用的库</span></span><br><span class="line">          <span class="comment">// &#x27;es5&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es7&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;, &#x27;es2018&#x27;, &#x27;es2019&#x27;, &#x27;es2020&#x27;, &#x27;esnext&#x27;, &#x27;dom&#x27;, </span></span><br><span class="line">          <span class="comment">// &#x27;dom.iterable&#x27;, &#x27;webworker&#x27;, &#x27;webworker.importscripts&#x27;, &#x27;webworker.iterable&#x27;, &#x27;scripthost&#x27;, &#x27;es2015.core&#x27;, &#x27;es2015.collection&#x27;, </span></span><br><span class="line">          <span class="comment">// &#x27;es2015.generator&#x27;, &#x27;es2015.iterable&#x27;, &#x27;es2015.promise&#x27;, &#x27;es2015.proxy&#x27;, &#x27;es2015.reflect&#x27;, &#x27;es2015.symbol&#x27;, &#x27;es2015.symbol.wellknown&#x27;, &#x27;es2016.array.include&#x27;,</span></span><br><span class="line">          <span class="comment">//  &#x27;es2017.object&#x27;, &#x27;es2017.sharedmemory&#x27;, &#x27;es2017.string&#x27;, &#x27;es2017.intl&#x27;, &#x27;es2017.typedarrays&#x27;, &#x27;es2018.asyncgenerator&#x27;, &#x27;es2018.asynciterable&#x27;, &#x27;es2018.intl&#x27;, </span></span><br><span class="line">          <span class="comment">// &#x27;es2018.promise&#x27;, &#x27;es2018.regexp&#x27;, &#x27;es2019.array&#x27;, &#x27;es2019.object&#x27;, &#x27;es2019.string&#x27;, &#x27;es2019.symbol&#x27;, &#x27;es2020.bigint&#x27;, &#x27;es2020.promise&#x27;, </span></span><br><span class="line">          <span class="comment">// &#x27;es2020.sharedmemory&#x27;, &#x27;es2020.string&#x27;, &#x27;es2020.symbol.wellknown&#x27;, &#x27;es2020.intl&#x27;, &#x27;esnext.array&#x27;, &#x27;esnext.symbol&#x27;, &#x27;esnext.asynciterable&#x27;, &#x27;esnext.intl&#x27;,</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">          <span class="comment">//outDir 用来指定编译后文件所在的目录</span></span><br><span class="line">          <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//outFile 将代码合并为一个文件</span></span><br><span class="line">          <span class="comment">// &quot;outFile&quot;: &quot;./dist/app.js&quot;,</span></span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 是否对js文件进行编译，默认是false</span></span><br><span class="line">          <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 是否检查js代码是否符合语法规范，默认值是false</span></span><br><span class="line">          <span class="string">&quot;checkJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 是否移除注释</span></span><br><span class="line">          <span class="string">&quot;removeComments&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 不生成编译后的文件</span></span><br><span class="line">          <span class="string">&quot;noEmit&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 当有错误时不生成编译文件</span></span><br><span class="line">          <span class="string">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 所有严格检查的总开关</span></span><br><span class="line">          <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 用来设置编译后的文件是否使用严格模式，默认是false</span></span><br><span class="line">          <span class="string">&quot;alwaysStrict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 不允许隐式的any类型</span></span><br><span class="line">          <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 不允许不明确类型的this</span></span><br><span class="line">          <span class="string">&quot;noImplicitThis&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 严格检查空值</span></span><br><span class="line">          <span class="string">&quot;strictNullChecks&quot;</span>: <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-webpack打包TS"><a href="#4-webpack打包TS" class="headerlink" title="4. webpack打包TS"></a>4. webpack打包TS</h3><ol><li>安装webpack</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack-cli typescript ts-loader</span><br></pre></td></tr></table></figure><ol start="2"><li>自动生成html</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D html-webpack-plugin</span><br></pre></td></tr></table></figure><ol start="3"><li>自动响应浏览器更新</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack-dev-server</span><br></pre></td></tr></table></figure><ol start="4"><li>清除dist目录旧文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D clean-webpack-plugin</span><br></pre></td></tr></table></figure><ol start="5"><li>webpack 中所有的配置信息都应该写在<code>module.exports</code>中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定打包文件所在目录</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">//指定打包文件的目录</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">//打包后文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="comment">//告诉webpack不使用箭头函数</span></span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//指定webpack打包时要使用的模块</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定要loader加载的规则</span></span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// test指定的时规则生效的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,<span class="comment">//以ts结尾的文件</span></span><br><span class="line">                <span class="comment">// 要使用的loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="comment">// 配置babel</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//指定加载器</span></span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                        <span class="comment">// 设置babel</span></span><br><span class="line">                        <span class="attr">options</span>: &#123;</span><br><span class="line">                            <span class="comment">//设置预定义的环境</span></span><br><span class="line">                            <span class="attr">presets</span>: [</span><br><span class="line">                                [</span><br><span class="line">                                    <span class="comment">//指定环境的插件</span></span><br><span class="line">                                    <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                    <span class="comment">// 配置信息</span></span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="comment">// 要兼容的目标浏览器及版本</span></span><br><span class="line">                                        <span class="attr">targets</span>: &#123;</span><br><span class="line">                                            <span class="string">&quot;chrome&quot;</span>: <span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                            <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        <span class="comment">//指定corejs的版本</span></span><br><span class="line">                                        <span class="string">&quot;corejs&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                                        <span class="comment">//使用corejs的方式 &quot;usage&quot;  表示按需加载</span></span><br><span class="line">                                        <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span> </span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                ]</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// &#x27;babel-loader&#x27;,</span></span><br><span class="line">                    <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="comment">// 要排除的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Webpack 插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// title: &quot;这是一个自定义的title&quot;、</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span> </span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来设置引用模块，可以将这些文件识别为模块</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-面向对象"><a href="#5-面向对象" class="headerlink" title="5. 面向对象"></a>5. 面向对象</h3><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。</p><ul><li>举例来说：<ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象</li></ul></li></ul><p>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</p><p>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p><h5 id="1、类（class）"><a href="#1、类（class）" class="headerlink" title="1、类（class）"></a>1、类（class）</h5><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li><p>定义类：</p><ul><li><pre><code class="typescript">class 类名 &#123;    属性名: 类型;        constructor(参数: 类型)&#123;        this.属性名 = 参数;    &#125;        方法名()&#123;        ....    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 示例：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    class Person&#123;</span><br><span class="line">        name: string;</span><br><span class="line">        age: number;</span><br><span class="line">    </span><br><span class="line">        constructor(name: string, age: number)&#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        sayHello()&#123;</span><br><span class="line">            console.log(`大家好，我是$&#123;this.name&#125;`);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>使用类：</p><ul><li><pre><code class="typescript">const p = new Person(&#39;孙悟空&#39;, 18);p.sayHello();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 2、面向对象的特点</span><br><span class="line"></span><br><span class="line">- 封装</span><br><span class="line"></span><br><span class="line">  - 对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</span><br><span class="line"></span><br><span class="line">  - 默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</span><br><span class="line"></span><br><span class="line">  - 只读属性（readonly）：</span><br><span class="line"></span><br><span class="line">    - 如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</span><br><span class="line"></span><br><span class="line">  - TS中属性具有三种修饰符：</span><br><span class="line"></span><br><span class="line">    - public（默认值），可以在类、子类和对象中修改</span><br><span class="line">    - protected ，可以在类、子类中修改</span><br><span class="line">    - private ，可以在类中修改</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - public</span><br><span class="line"></span><br><span class="line">      - ```typescript</span><br><span class="line">        class Person&#123;</span><br><span class="line">            public name: string; // 写或什么都不写都是public</span><br><span class="line">            public age: number;</span><br><span class="line">        </span><br><span class="line">            constructor(name: string, age: number)&#123;</span><br><span class="line">                this.name = name; // 可以在类中修改</span><br><span class="line">                this.age = age;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            sayHello()&#123;</span><br><span class="line">                console.log(`大家好，我是$&#123;this.name&#125;`);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        class Employee extends Person&#123;</span><br><span class="line">            constructor(name: string, age: number)&#123;</span><br><span class="line">                super(name, age);</span><br><span class="line">                this.name = name; //子类中可以修改</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        const p = new Person(&#x27;孙悟空&#x27;, 18);</span><br><span class="line">        p.name = &#x27;猪八戒&#x27;;// 可以通过对象修改</span><br></pre></td></tr></table></figure>- protected  - ```typescript    class Person&#123;        protected name: string;        protected age: number;            constructor(name: string, age: number)&#123;            this.name = name; // 可以修改            this.age = age;        &#125;            sayHello()&#123;            console.log(`大家好，我是$&#123;this.name&#125;`);        &#125;    &#125;        class Employee extends Person&#123;            constructor(name: string, age: number)&#123;            super(name, age);            this.name = name; //子类中可以修改        &#125;    &#125;        const p = new Person(&#39;孙悟空&#39;, 18);    p.name = &#39;猪八戒&#39;;// 不能修改    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- private</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    class Person&#123;</span><br><span class="line">        private name: string;</span><br><span class="line">        private age: number;</span><br><span class="line">    </span><br><span class="line">        constructor(name: string, age: number)&#123;</span><br><span class="line">            this.name = name; // 可以修改</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        sayHello()&#123;</span><br><span class="line">            console.log(`大家好，我是$&#123;this.name&#125;`);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    class Employee extends Person&#123;</span><br><span class="line">    </span><br><span class="line">        constructor(name: string, age: number)&#123;</span><br><span class="line">            super(name, age);</span><br><span class="line">            this.name = name; //子类中不能修改</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const p = new Person(&#x27;孙悟空&#x27;, 18);</span><br><span class="line">    p.name = &#x27;猪八戒&#x27;;// 不能修改</span><br></pre></td></tr></table></figure></code></pre></li><li><p>属性存取器</p><ul><li><p>对于一些不希望被任意修改的属性，可以将其设置为private</p></li><li><p>直接将其设置为private将导致无法再通过对象修改其中的属性</p></li><li><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p></li><li><p>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</p></li><li><p>示例：</p><ul><li><pre><code class="typescript">class Person&#123;    private _name: string;    constructor(name: string)&#123;        this._name = name;    &#125;    get name()&#123;        return this._name;    &#125;    set name(name: string)&#123;        this._name = name;    &#125;&#125;const p1 = new Person(&#39;孙悟空&#39;);console.log(p1.name); // 通过getter读取name属性p1.name = &#39;猪八戒&#39;; // 通过setter修改name属性<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 静态属性</span><br><span class="line"></span><br><span class="line">  - 静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</span><br><span class="line"></span><br><span class="line">  - 静态属性（方法）使用static开头</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - ```typescript</span><br><span class="line">      class Tools&#123;</span><br><span class="line">          static PI = 3.1415926;</span><br><span class="line">          </span><br><span class="line">          static sum(num1: number, num2: number)&#123;</span><br><span class="line">              return num1 + num2</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      console.log(Tools.PI);</span><br><span class="line">      console.log(Tools.sum(123, 456));</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>this</p><ul><li>在类中，使用this表示当前对象</li></ul></li></ul></li><li><p>继承</p><ul><li><p>继承时面向对象中的又一个特性</p></li><li><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><ul><li><p>示例：</p><ul><li><pre><code class="typescript">class Animal&#123;    name: string;    age: number;    constructor(name: string, age: number)&#123;        this.name = name;        this.age = age;    &#125;&#125;class Dog extends Animal&#123;    bark()&#123;        console.log(`$&#123;this.name&#125;在汪汪叫！`);    &#125;&#125;const dog = new Dog(&#39;旺财&#39;, 4);dog.bark();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 通过继承可以在不修改类的情况下完成对类的扩展</span><br><span class="line"></span><br><span class="line">- 重写</span><br><span class="line"></span><br><span class="line">  - 发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - ```typescript</span><br><span class="line">      class Animal&#123;</span><br><span class="line">          name: string;</span><br><span class="line">          age: number;</span><br><span class="line">      </span><br><span class="line">          constructor(name: string, age: number)&#123;</span><br><span class="line">              this.name = name;</span><br><span class="line">              this.age = age;</span><br><span class="line">          &#125;</span><br><span class="line">      </span><br><span class="line">          run()&#123;</span><br><span class="line">              console.log(`父类中的run方法！`);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      class Dog extends Animal&#123;</span><br><span class="line">      </span><br><span class="line">          bark()&#123;</span><br><span class="line">              console.log(`$&#123;this.name&#125;在汪汪叫！`);</span><br><span class="line">          &#125;</span><br><span class="line">      </span><br><span class="line">          run()&#123;</span><br><span class="line">              console.log(`子类中的run方法，会重写父类中的run方法！`);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      const dog = new Dog(&#x27;旺财&#x27;, 4);</span><br><span class="line">      dog.bark();</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在子类中可以使用super来完成对父类的引用</p></li></ul></li></ul></li><li><p>抽象类（abstract class）</p><ul><li><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p></li><li><pre><code class="typescript">abstract class Animal&#123;    abstract run(): void;    bark()&#123;        console.log(&#39;动物在叫~&#39;);    &#125;&#125;class Dog extends Animals&#123;    run()&#123;        console.log(&#39;狗在跑~&#39;);    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - 使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">##### 3、接口（Interface）</span><br><span class="line"></span><br><span class="line">接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</span><br><span class="line"></span><br><span class="line">- 示例（检查对象类型）：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    interface Person&#123;</span><br><span class="line">        name: string;</span><br><span class="line">        sayHello():void;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function fn(per: Person)&#123;</span><br><span class="line">        per.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fn(&#123;name:&#x27;孙悟空&#x27;, sayHello() &#123;console.log(`Hello, 我是 $&#123;this.name&#125;`)&#125;&#125;);</span><br><span class="line">    </span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>示例（实现）</p><ul><li><pre><code class="typescript">interface Person&#123;    name: string;    sayHello():void;&#125;class Student implements Person&#123;    constructor(public name: string) &#123;    &#125;    sayHello() &#123;        console.log(&#39;大家好，我是&#39;+this.name);    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 4、泛型（Generic）</span><br><span class="line"></span><br><span class="line">定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</span><br><span class="line"></span><br><span class="line">- 举个例子：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    function test(arg: any): any&#123;</span><br><span class="line">    return arg;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</p></li><li><p>使用泛型：</p></li><li><pre><code class="typescript">function test&lt;T&gt;(arg: T): T&#123;    return arg;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 这里的```&lt;T&gt;```就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。</span><br><span class="line"></span><br><span class="line">- 那么如何使用上边的函数呢？</span><br><span class="line"></span><br><span class="line">  - 方式一（直接使用）：</span><br><span class="line"></span><br><span class="line">    - ```typescript</span><br><span class="line">      test(10)</span><br></pre></td></tr></table></figure>  - 使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式- 方式二（指定类型）：  - ```typescript    test&lt;number&gt;(10)    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - 也可以在函数后手动指定泛型</span><br><span class="line"></span><br><span class="line">- 可以同时指定多个泛型，泛型间使用逗号隔开：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    function test&lt;T, K&gt;(a: T, b: K): K&#123;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    test&lt;number, string&gt;(10, &quot;hello&quot;);</span><br></pre></td></tr></table></figure>- 使用泛型时，完全可以将泛型当成是一个普通的类去使用</code></pre></li><li><p>类中同样可以使用泛型：</p><ul><li><pre><code class="typescript">class MyClass&lt;T&gt;&#123;    prop: T;    constructor(prop: T)&#123;        this.prop = prop;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 除此之外，也可以对泛型的范围进行约束</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    interface MyInter&#123;</span><br><span class="line">        length: number;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function test&lt;T extends MyInter&gt;(arg: T): number&#123;</span><br><span class="line">        return arg.length;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</p></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">TypeScript学习笔记</summary>
    
    
    
    <category term="前端" scheme="https://codeslive.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-ES11学习笔记</title>
    <link href="https://codeslive.top/2023/05/26/ES6-ES11%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://codeslive.top/2023/05/26/ES6-ES11%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-05-26T10:51:07.563Z</published>
    <updated>2023-05-26T12:45:31.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="一、let-var-const"><a href="#一、let-var-const" class="headerlink" title="一、let var const"></a>一、let var const</h3><h5 id="1-let"><a href="#1-let" class="headerlink" title="1. let"></a>1. let</h5><ol><li>变量不能重复声明</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let star = &#x27;罗志祥&#x27;;</span></span><br><span class="line"><span class="comment">// let star = &#x27;小猪&#x27;; //报错</span></span><br></pre></td></tr></table></figure><ol start="2"><li>块级作用域</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> girl = <span class="string">&#x27;周扬青&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(girl); // caught ReferenceError: girl is not defined</span></span><br></pre></td></tr></table></figure><ol start="3"><li>不存在变量提升</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// console.log(song); //caught ReferenceError: Cannot access &#x27;song&#x27; before initialization</span></span><br><span class="line"><span class="comment">// let song = &#x27;恋爱达人&#x27;; </span></span><br></pre></td></tr></table></figure><ol start="4"><li>不影响作用链</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> school = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>实践案例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>点击 DIV 换色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="built_in">rgb</span>(<span class="number">42</span>, <span class="number">156</span>, <span class="number">156</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span>点击切换颜色<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取div元素对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> items = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;item&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//遍历并绑定事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;items.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            items[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//修改当前元素的背景颜色</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.style.background = &#x27;pink&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">                items[i].<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-const"><a href="#2-const" class="headerlink" title="2. const"></a>2. const</h5><ol><li>一定要赋初始值，否则报错</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><ol start="2"><li>一般常量使用大写(潜规则)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cosnt B = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>常量不能修改</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">NAME</span> = <span class="string">&#x27;小康&#x27;</span>;</span><br><span class="line"><span class="variable constant_">NAME</span> = <span class="string">&#x27;李白&#x27;</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>和<code>let</code>一样有块级作用域</p></li><li><p>对于数组和对象的元素修改, 不算做对常量的修改, 不会报错</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">TEAM</span> = [<span class="string">&#x27;UZI&#x27;</span>,<span class="string">&#x27;MXLG&#x27;</span>,<span class="string">&#x27;Ming&#x27;</span>,<span class="string">&#x27;Letme&#x27;</span>];</span><br><span class="line"><span class="comment">// TEAM.push(&#x27;Meiko&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">TEAM</span>);</span><br></pre></td></tr></table></figure><h3 id="二、模板字符串"><a href="#二、模板字符串" class="headerlink" title="二、模板字符串"></a>二、模板字符串</h3><h5 id="1-声明"><a href="#1-声明" class="headerlink" title="1. 声明"></a>1. 声明</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`我也是一个字符串哦!`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str, <span class="keyword">typeof</span> str);</span><br></pre></td></tr></table></figure><h5 id="2-内容中可以直接出现换行符"><a href="#2-内容中可以直接出现换行符" class="headerlink" title="2. 内容中可以直接出现换行符"></a>2. 内容中可以直接出现换行符</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;沈腾&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;玛丽&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;魏翔&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;艾伦&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;`</span>;</span><br></pre></td></tr></table></figure><h5 id="3-变量拼接"><a href="#3-变量拼接" class="headerlink" title="3.变量拼接"></a>3.变量拼接</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lovest = <span class="string">&#x27;魏翔&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;lovest&#125;</span>是我心目中最搞笑的演员!!`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(out);</span><br></pre></td></tr></table></figure><h3 id="三、简化对象的写法"><a href="#三、简化对象的写法" class="headerlink" title="三、简化对象的写法"></a>三、简化对象的写法</h3><blockquote><p>说明：ES6 允许在大括号里面, 直接写入变量和函数, 作为对象的属性和方法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 允许在大括号里面, 直接写入变量和函数, 作为对象的属性和方法</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;小康&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我们可以改变你！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  name,</span><br><span class="line">  change,</span><br><span class="line">  improve () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我们可以提高你的技能&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br></pre></td></tr></table></figure><h3 id="四、变量的解构赋值"><a href="#四、变量的解构赋值" class="headerlink" title="四、变量的解构赋值"></a>四、变量的解构赋值</h3><blockquote><p>说明：ES6 允许按照一定模式从数组和对象中提取值, 对变量进行赋值。</p></blockquote><h5 id="1-数组的解构"><a href="#1-数组的解构" class="headerlink" title="1. 数组的解构"></a>1. 数组的解构</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">F4</span> = [<span class="string">&#x27;小沈阳&#x27;</span>, <span class="string">&#x27;刘能&#x27;</span>, <span class="string">&#x27;赵四&#x27;</span>, <span class="string">&#x27;宋小宝&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [xiao, liu, zhao, song] = <span class="variable constant_">F4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiao, liu, zhao, song);</span><br></pre></td></tr></table></figure><h5 id="2-对象的解构"><a href="#2-对象的解构" class="headerlink" title="2. 对象的解构"></a>2. 对象的解构</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zhao = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;赵本山&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;不详&#x27;</span>,</span><br><span class="line">  <span class="attr">xiaopin</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以演小品&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="comment">// let &#123;name, age, xiaopin&#125; = zhao;</span></span><br></pre></td></tr></table></figure><h3 id="五、箭头函数"><a href="#五、箭头函数" class="headerlink" title="五、箭头函数"></a>五、箭头函数</h3><blockquote><p>说明：ES6 允许使用 箭头 (<code>=&gt;</code>) 定义函数。</p><ol><li>箭头函数适合与 this 无关的回调 如定时器、数组的方法回调。</li><li>箭头函数不适合与 this 有关的回调 如事件回调、对象的方法。</li></ol></blockquote><h5 id="1-this指向问题"><a href="#1-this指向问题" class="headerlink" title="1. this指向问题"></a>1. this指向问题</h5><ul><li>this 是静态的 this 始终指向函数声明时所在作用域下的 this 的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span> () &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> <span class="title function_">getName2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 设置 window 对象的 name 属性</span></span><br><span class="line"> <span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;小康&#x27;</span>;</span><br><span class="line"> <span class="keyword">const</span> school = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;B-website&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 直接调用</span></span><br><span class="line"> <span class="title function_">getName</span>();</span><br><span class="line"> <span class="title function_">getName2</span>();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// call 方法调用</span></span><br><span class="line"> getName.<span class="title function_">call</span>(school); <span class="comment">// B-website</span></span><br><span class="line"> getName2.<span class="title function_">call</span>(school); <span class="comment">// 小康</span></span><br></pre></td></tr></table></figure><h5 id="2-不能作为构造实例化对象"><a href="#2-不能作为构造实例化对象" class="headerlink" title="2. 不能作为构造实例化对象"></a>2. 不能作为构造实例化对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">Person</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let me = new Person(&#x27;xiao&#x27;, 30);</span></span><br><span class="line"><span class="comment">// console.log(me); // 报错</span></span><br></pre></td></tr></table></figure><h5 id="3-不能使用-arguments-变量"><a href="#3-不能使用-arguments-变量" class="headerlink" title="3. 不能使用 arguments 变量"></a>3. 不能使用 arguments 变量</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h5 id="4-箭头函数的简写"><a href="#4-箭头函数的简写" class="headerlink" title="4. 箭头函数的简写"></a>4. 箭头函数的简写</h5><ul><li><p>省略小括号, 当形参有且只有一个的时候</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = n =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> n + n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">9</span>));</span><br></pre></td></tr></table></figure></li><li><p>省略花括号, 当代码体只有一条语句的时候, 此时 return 必须省略，而且语句的执行结果就是函数的返回值</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">pow</span> = n =&gt; n * n;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pow</span>(<span class="number">8</span>));</span><br></pre></td></tr></table></figure><h5 id="5-实践案例"><a href="#5-实践案例" class="headerlink" title="5. 实践案例"></a>5. 实践案例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>箭头函数实践<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#58a</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ad&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//需求-1  点击 div 2s 后颜色变成『粉色』</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ad = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ad&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 绑定事件</span></span></span><br><span class="line"><span class="language-javascript">    ad.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 保存 this 的值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// let_this = this;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 定时器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//需求-2  从数组中返回偶数的元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">25</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const result = arr.filter(function (item) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   if (item % 2 === 0) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     return true;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125; else &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     return false;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> result = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 箭头函数适合与 this 无关的回调 如定时器、数组的方法回调</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 箭头函数不适合与 this 有关的回调 如事件回调、对象的方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="六、参数默认值"><a href="#六、参数默认值" class="headerlink" title="六、参数默认值"></a>六、参数默认值</h3><h5 id="1-形参初始值-具有默认值的的参数-一般位置要靠后-潜规则"><a href="#1-形参初始值-具有默认值的的参数-一般位置要靠后-潜规则" class="headerlink" title="1. 形参初始值 具有默认值的的参数, 一般位置要靠后 (潜规则)"></a>1. 形参初始值 具有默认值的的参数, 一般位置要靠后 (潜规则)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span> (a, b, c = <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h5 id="2-与解构赋值结合"><a href="#2-与解构赋值结合" class="headerlink" title="2. 与解构赋值结合"></a>2. 与解构赋值结合</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span> (&#123; host, username, password, port &#125;) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;codeslive.top&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="七、rest-参数"><a href="#七、rest-参数" class="headerlink" title="七、rest 参数"></a>七、rest 参数</h3><blockquote><p>说明：ES6 引入 rest 参数, 用于获取函数的实参, 用来代替 arguments。</p></blockquote><h5 id="1-获取实参的方式"><a href="#1-获取实参的方式" class="headerlink" title="1. 获取实参的方式"></a>1. 获取实参的方式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">date2</span> (...args) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">// filter some every map </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">date2</span>(<span class="string">&#x27;小白&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小黑&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="2-参数必须要放到参数最后"><a href="#2-参数必须要放到参数最后" class="headerlink" title="2. 参数必须要放到参数最后"></a>2. 参数必须要放到参数最后</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (a, b, ...args) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure><h3 id="八、扩展运算符"><a href="#八、扩展运算符" class="headerlink" title="八、扩展运算符"></a>八、扩展运算符</h3><blockquote><p>说明：扩展运算符能将『数组』转换为逗号分隔的『参数序列』</p></blockquote><h5 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组</span></span><br><span class="line"><span class="keyword">const</span> boys = [<span class="string">&#x27;猪猪侠&#x27;</span>, <span class="string">&#x27;熊大&#x27;</span>, <span class="string">&#x27;熊二&#x27;</span>];</span><br><span class="line"><span class="comment">// =&gt; &#x27;猪猪侠&#x27;,&#x27;熊大&#x27;, &#x27;熊二&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">chunwan</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">chunwan</span>(...boys); <span class="comment">// &#x27;猪猪侠&#x27;,&#x27;熊大&#x27;, &#x27;熊二&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2. 应用场景"></a>2. 应用场景</h5><ul><li>数组的合并</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> food = [<span class="string">&#x27;包子&#x27;</span>, <span class="string">&#x27;馒头&#x27;</span>, <span class="string">&#x27;豆浆&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> goods = [<span class="string">&#x27;米饭&#x27;</span>, <span class="string">&#x27;白粥&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> foodGoods = [...food, ...goods];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foodGoods);</span><br></pre></td></tr></table></figure><ul><li>数组的克隆</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> phone = [<span class="string">&#x27;meizu&#x27;</span>, <span class="string">&#x27;xiaomi&#x27;</span>, <span class="string">&#x27;huawei&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> phoneT = [...phone];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(phoneT);</span><br></pre></td></tr></table></figure><ul><li>将伪数组转为真正的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> divArr = [...divs];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divArr); <span class="comment">// arguments</span></span><br></pre></td></tr></table></figure><h3 id="九、Symbol"><a href="#九、Symbol" class="headerlink" title="九、Symbol"></a>九、Symbol</h3><h5 id="1-基本使用-1"><a href="#1-基本使用-1" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="comment">// console.log(s, typeof s);</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="comment">//Symbol.for 创建</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能与其他数据进行运算</span></span><br><span class="line"><span class="comment">//    let result = s + 100;</span></span><br><span class="line"><span class="comment">//    let result = s &gt; 100;</span></span><br><span class="line"><span class="comment">//    let result = s + s;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// USONB  you are so niubility </span></span><br><span class="line"><span class="comment">// u  undefined</span></span><br><span class="line"><span class="comment">// s  string  symbol</span></span><br><span class="line"><span class="comment">// o  object</span></span><br><span class="line"><span class="comment">// n  null number</span></span><br><span class="line"><span class="comment">// b  boolean</span></span><br></pre></td></tr></table></figure><h5 id="2-Symbol创建对象属性"><a href="#2-Symbol创建对象属性" class="headerlink" title="2.Symbol创建对象属性"></a>2.Symbol创建对象属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向对象中添加方法 up down</span></span><br><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;俄罗斯方块&#x27;</span>,</span><br><span class="line">  <span class="attr">up</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;,</span><br><span class="line">  <span class="attr">down</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个对象</span></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">  <span class="attr">up</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">  <span class="attr">down</span>: <span class="title class_">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">game[methods.<span class="property">up</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以改变形状&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">game[methods.<span class="property">down</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以快速下降&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(game);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;狼人杀&#x27;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以发言&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;zibao&#x27;</span>)]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以自爆&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(youxi);</span><br></pre></td></tr></table></figure><h3 id="十、迭代器"><a href="#十、迭代器" class="headerlink" title="十、迭代器"></a>十、迭代器</h3><h5 id="1-基本使用-2"><a href="#1-基本使用-2" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组</span></span><br><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 遍历数组</span></span><br><span class="line"><span class="comment">// for (let v of xiyou) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(v);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象的 next 方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// 唐僧</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// 孙悟空 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// 猪八戒</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// 沙僧</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h5 id="2-自定义遍历对象"><a href="#2-自定义遍历对象" class="headerlink" title="2. 自定义遍历对象"></a>2. 自定义遍历对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个对象</span></span><br><span class="line"><span class="keyword">const</span> banji = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;终极一班&#x27;</span>,</span><br><span class="line">  <span class="attr">stus</span>: [</span><br><span class="line">    <span class="string">&#x27;xiaoming&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;xiaobao&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;xiaokang&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;knight&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>] () &#123;</span><br><span class="line">    <span class="comment">// 索引变量</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 保存 this</span></span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; _this.<span class="property">stus</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> result = &#123; <span class="attr">value</span>: _this.<span class="property">stus</span>[index], <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">          <span class="comment">// 下标自增</span></span><br><span class="line">          index++;</span><br><span class="line">          <span class="comment">// 返回结果</span></span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历这个对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> banji) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十一、生成器"><a href="#十一、生成器" class="headerlink" title="十一、生成器"></a>十一、生成器</h3><blockquote><p>说明：生成器其实就是一个特殊的函数</p><p>异步编程  纯回调函数  node fs  ajax mongodb</p></blockquote><h5 id="1-基本使用-3"><a href="#1-基本使用-3" class="headerlink" title="1.  基本使用"></a>1.  基本使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* gen () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;一只没有耳朵&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;一只没有尾巴&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;真奇怪&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">444</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> interator = <span class="title function_">gen</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(interator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(interator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(interator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(interator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure><h5 id="2-生成器函数参数"><a href="#2-生成器函数参数" class="headerlink" title="2. 生成器函数参数"></a>2. 生成器函数参数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* gen (arg) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg); <span class="comment">// BBB</span></span><br><span class="line">  <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(one); </span><br><span class="line">  <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(two);</span><br><span class="line">  <span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">333</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(three);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行获取迭代器对象</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&#x27;AAA&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// AAA</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// next 方法可以传入实参</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;BBB&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;CCC&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;DDD&#x27;</span>));</span><br></pre></td></tr></table></figure><p>3.生成器函数实例</p><ul><li>实例1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步编程 文件操作 网络操作 (ajax, request) 数据库操作</span></span><br><span class="line"><span class="comment">// 1s 后控制台输出 111  2s后输出 222  3s后输出 333 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调地狱</span></span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(111);</span></span><br><span class="line"><span class="comment">//   setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(222);</span></span><br><span class="line"><span class="comment">//     setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//       console.log(333);</span></span><br><span class="line"><span class="comment">//     &#125;, 3000);</span></span><br><span class="line"><span class="comment">//   &#125;, 2000);</span></span><br><span class="line"><span class="comment">// &#125;, 1000);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span> () &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">    iterator.<span class="title function_">next</span>();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span> () &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">    iterator.<span class="title function_">next</span>();</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">three</span> () &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">    iterator.<span class="title function_">next</span>();</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* gen () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">three</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用生成器函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><ul><li>实例2</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟获取  用户数据  订单数据  商品数据 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUsers</span> () &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;用户数据&#x27;</span>;</span><br><span class="line">    <span class="comment">// 调用 next 方法, 并且将数据传入</span></span><br><span class="line">    iterator.<span class="title function_">next</span>(data);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOrders</span> () &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;订单数据&#x27;</span>;</span><br><span class="line">    <span class="comment">// 调用 next 方法, 并且将数据传入</span></span><br><span class="line">    iterator.<span class="title function_">next</span>(data);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGoods</span> () &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;商品数据&#x27;</span>;</span><br><span class="line">    <span class="comment">// 调用 next 方法, 并且将数据传入</span></span><br><span class="line">    iterator.<span class="title function_">next</span>(data);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* gen () &#123;</span><br><span class="line">  <span class="keyword">let</span> users = <span class="keyword">yield</span> <span class="title function_">getUsers</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(users);</span><br><span class="line">  <span class="keyword">let</span> orders = <span class="keyword">yield</span> <span class="title function_">getOrders</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(orders);</span><br><span class="line">  <span class="keyword">let</span> goods = <span class="keyword">yield</span> <span class="title function_">getGoods</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(goods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用生成器函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><h3 id="十二、Promise"><a href="#十二、Promise" class="headerlink" title="十二、Promise"></a>十二、Promise</h3><h5 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//设置 p 对象的状态为失败, 并设置失败的值</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;出错啦!&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// p.then(function(value)&#123;&#125;, function(reason)&#123;</span></span><br><span class="line"><span class="comment">//     console.error(reason);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="2-封装读取文件"><a href="#2-封装读取文件" class="headerlink" title="2. 封装读取文件"></a>2. 封装读取文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 调用方法读取文件</span></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./resources/为学.md&#x27;, (err, data)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     //如果失败, 则抛出错误</span></span><br><span class="line"><span class="comment">//     if(err) throw err;</span></span><br><span class="line"><span class="comment">//     //如果没有出错, 则输出内容</span></span><br><span class="line"><span class="comment">//     console.log(data.toString());</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 使用 Promise 封装</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/为学.mda&quot;</span>, <span class="function">(<span class="params">err, data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//判断如果失败</span></span><br><span class="line">        <span class="keyword">if</span>(err) <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="comment">//如果成功</span></span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取失败!!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-封装AJAX"><a href="#3-封装AJAX" class="headerlink" title="3. 封装AJAX"></a>3. 封装AJAX</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 接口地址: https://api.apiopen.top/getJoke</span><br><span class="line">const p = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    //1. 创建对象</span><br><span class="line">    const xhr = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">    //2. 初始化</span><br><span class="line">    xhr.open(&quot;GET&quot;, &quot;https://api.apiopen.top/getJ&quot;);</span><br><span class="line"></span><br><span class="line">    //3. 发送</span><br><span class="line">    xhr.send();</span><br><span class="line"></span><br><span class="line">    //4. 绑定事件, 处理响应结果</span><br><span class="line">    xhr.onreadystatechange = function () &#123;</span><br><span class="line">        //判断</span><br><span class="line">        if (xhr.readyState === 4) &#123;</span><br><span class="line">            //判断响应状态码 200-299</span><br><span class="line">            if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) &#123;</span><br><span class="line">                //表示成功</span><br><span class="line">                resolve(xhr.response);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //如果失败</span><br><span class="line">                reject(xhr.status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//指定回调</span><br><span class="line">p.then(function(value)&#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;, function(reason)&#123;</span><br><span class="line">    console.error(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="4-then方法"><a href="#4-then方法" class="headerlink" title="4. then方法"></a>4. then方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 promise 对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;用户数据&#x27;</span>);</span><br><span class="line">        <span class="comment">// reject(&#x27;出错啦&#x27;);</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 then 方法  then方法的返回结果是 Promise 对象, 对象状态由回调函数的执行结果决定</span></span><br><span class="line"><span class="comment">//1. 如果回调函数中返回的结果是 非 promise 类型的属性, 状态为成功, 返回值为对象的成功的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const result = p.then(value =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(value);</span></span><br><span class="line"><span class="comment">//     //1. 非 promise 类型的属性</span></span><br><span class="line"><span class="comment">//     // return &#x27;iloveyou&#x27;;</span></span><br><span class="line"><span class="comment">//     //2. 是 promise 对象</span></span><br><span class="line"><span class="comment">//     // return new Promise((resolve, reject)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     //     // resolve(&#x27;ok&#x27;);</span></span><br><span class="line"><span class="comment">//     //     reject(&#x27;error&#x27;);</span></span><br><span class="line"><span class="comment">//     // &#125;);</span></span><br><span class="line"><span class="comment">//     //3. 抛出错误</span></span><br><span class="line"><span class="comment">//     // throw new Error(&#x27;出错啦!&#x27;);</span></span><br><span class="line"><span class="comment">//     throw &#x27;出错啦!&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;, reason=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.warn(reason);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//链式调用</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="5-catch方法"><a href="#5-catch方法" class="headerlink" title="5.  catch方法"></a>5.  catch方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//设置 p 对象的状态为失败, 并设置失败的值</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;出错啦!&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// p.then(function(value)&#123;&#125;, function(reason)&#123;</span></span><br><span class="line"><span class="comment">//     console.error(reason);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="6-promise实践"><a href="#6-promise实践" class="headerlink" title="6. promise实践"></a>6. promise实践</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./resources/为学.md&#x27;, (err, data1)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     fs.readFile(&#x27;./resources/插秧诗.md&#x27;, (err, data2)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//         fs.readFile(&#x27;./resources/观书有感.md&#x27;, (err, data3)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//             let result = data1 + &#x27;\r\n&#x27; +data2  +&#x27;\r\n&#x27;+ data3;</span></span><br><span class="line"><span class="comment">//             console.log(result);</span></span><br><span class="line"><span class="comment">//         &#125;);</span></span><br><span class="line"><span class="comment">//     &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 promise 实现</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/为学.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/插秧诗.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([value, data]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/观书有感.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//压入</span></span><br><span class="line">            value.<span class="title function_">push</span>(data);</span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">join</span>(<span class="string">&#x27;\r\n&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="十三、集合"><a href="#十三、集合" class="headerlink" title="十三、集合"></a>十三、集合</h3><h5 id="1-Set"><a href="#1-Set" class="headerlink" title="1. Set"></a>1. Set</h5><ul><li>声明一个Set</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;大事儿&#x27;</span>,<span class="string">&#x27;小事儿&#x27;</span>,<span class="string">&#x27;好事儿&#x27;</span>,<span class="string">&#x27;坏事儿&#x27;</span>,<span class="string">&#x27;小事儿&#x27;</span>]);</span><br></pre></td></tr></table></figure><ul><li><p>Set API</p><ol><li>元素个数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="property">size</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>添加新的元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.<span class="title function_">add</span>(<span class="string">&#x27;喜事儿&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>删除元素</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.delete(&#x27;坏事儿&#x27;);</span><br></pre></td></tr></table></figure><ol start="4"><li>检测元素是否存在，存在返回<code>true</code>，不存在返回<code>false</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="title function_">has</span>(<span class="string">&#x27;糟心事&#x27;</span>));</span><br></pre></td></tr></table></figure><ol start="5"><li>清空</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure></li><li><p>集合实践</p><ol><li>数组去重</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">34</span>, <span class="number">56</span>, <span class="number">66</span>, <span class="number">78</span>, <span class="number">100</span>];</span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><ol start="2"><li>交集</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">34</span>, <span class="number">56</span>, <span class="number">66</span>, <span class="number">78</span>, <span class="number">100</span>];</span><br><span class="line">   <span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, , <span class="number">56</span>, <span class="number">78</span>, <span class="number">100</span>, <span class="number">9</span>, <span class="number">8</span>];</span><br><span class="line">   <span class="comment">// 交集</span></span><br><span class="line">   <span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr2);</span><br><span class="line">     <span class="keyword">if</span> (s2.<span class="title function_">has</span>(item)) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">  </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 链式写法</span></span><br><span class="line">   <span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item));</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h5 id="2-Map"><a href="#2-Map" class="headerlink" title="2. Map"></a>2. Map</h5><ul><li>基本使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明 Map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;小康&#x27;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我们可以改变你！！&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line">  <span class="attr">home</span>: <span class="string">&#x27;LUODING&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">m.<span class="title function_">set</span>(key, [<span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// size</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br></pre></td></tr></table></figure><ul><li><p>Map API</p><ol><li>元素个数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>删除元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>获取元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&#x27;change&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(key));</span><br></pre></td></tr></table></figure><ol start="4"><li>清空</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure></li></ul><h3 id="十四、类"><a href="#十四、类" class="headerlink" title="十四、类"></a>十四、类</h3><h5 id="1-class类"><a href="#1-class类" class="headerlink" title="1. class类"></a>1. class类</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手机</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Phone</span> (brand, price) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 添加方法</span></span><br><span class="line"> <span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话！！！&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 实例化对象</span></span><br><span class="line"> <span class="keyword">let</span> <span class="title class_">Huawei</span> = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&#x27;华为&#x27;</span>, <span class="number">5999</span>);</span><br><span class="line"> <span class="title class_">Huawei</span>.<span class="title function_">call</span>();</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Huawei</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// class</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Showji</span> &#123;</span><br><span class="line">   <span class="comment">// 构造方法 名字不能修改</span></span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 方法必须使用该语法, 不能使用 ES5 的对象完整形式</span></span><br><span class="line">   call () &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话!!&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> onePlus = <span class="keyword">new</span> <span class="title class_">Showji</span>(<span class="string">&#x27;1+&#x27;</span>, <span class="number">1999</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(onePlus);</span><br></pre></td></tr></table></figure><h5 id="2-class类的静态成员"><a href="#2-class类的静态成员" class="headerlink" title="2. class类的静态成员"></a>2. class类的静态成员</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">  <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="keyword">static</span> name = <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line">  <span class="keyword">static</span> change () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以改变世界&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">name</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone</span>.<span class="property">name</span>); <span class="comment">// 手机</span></span><br></pre></td></tr></table></figure><h5 id="3-class类继承"><a href="#3-class类继承" class="headerlink" title="3. class类继承"></a>3. class类继承</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(brand, price);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  photo () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拍照&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  playGame () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;玩游戏&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  call () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以进行视频通话&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xiaomi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&#x27;小米&#x27;</span>, <span class="number">799</span>, <span class="string">&#x27;黑色&#x27;</span>, <span class="string">&#x27;4.7inch&#x27;</span>);</span><br><span class="line">xiaomi.<span class="title function_">call</span>(); <span class="comment">// 我可以进行视频通话</span></span><br><span class="line">xiaomi.<span class="title function_">photo</span>(); <span class="comment">// 拍照</span></span><br><span class="line">xiaomi.<span class="title function_">playGame</span>(); <span class="comment">// 玩游戏</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-class的get和set"><a href="#4-class的get和set" class="headerlink" title="4. class的get和set"></a>4. class的get和set</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">  get price () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;价格属性被获取了&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;iloveyou&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set price (newVal) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;价格属性被修改了&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">price</span>);</span><br><span class="line"></span><br><span class="line">s.<span class="property">price</span> = <span class="string">&#x27;free&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="十五、数值扩展"><a href="#十五、数值扩展" class="headerlink" title="十五、数值扩展"></a>十五、数值扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number.EPSILON 是 JavaScript 表示的最小精度</span></span><br><span class="line"><span class="comment">// EPSILON 属性的值接近于  2.2204460492503130808472633361816E-16</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">equal</span> (a, b) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(a - b) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(0.1 + 0.2 === 0.3); // false</span></span><br><span class="line"><span class="comment">// console.log(equal(0.1 + 0.2, 0.3)); // true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 二进制和八进制</span></span><br><span class="line"><span class="comment">// let b = 0b1010;</span></span><br><span class="line"><span class="comment">// let o = 0o777;</span></span><br><span class="line"><span class="comment">// let d = 100;</span></span><br><span class="line"><span class="comment">// let x = 0xff;</span></span><br><span class="line"><span class="comment">// console.log(x);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Number.isFinite 检测一个数值是否为有限数</span></span><br><span class="line"><span class="comment">// console.log(Number.isFinite(100));</span></span><br><span class="line"><span class="comment">// console.log(Number.isFinite(100 / 0));</span></span><br><span class="line"><span class="comment">// console.log(Number.isFinite(Infinity));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Number.isNaN 检测一个数是否为 NaN</span></span><br><span class="line"><span class="comment">// console.log(Number.isNaN(123));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Number.parseInt Number.parseFloat字符串转整数</span></span><br><span class="line"><span class="comment">// console.log(Number.parseInt(`521love`)); // 521</span></span><br><span class="line"><span class="comment">// console.log(Number.parseFloat(`12345加油`)); // 12345</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Number.isInteger 判断一个数是否为整数</span></span><br><span class="line"><span class="comment">// console.log(Number.isInteger(5));</span></span><br><span class="line"><span class="comment">// console.log(Number.isInteger(2.5));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. Math.trunc 将数字的小数部分抹掉 </span></span><br><span class="line"><span class="comment">// console.log(Math.trunc(3.5));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. Math.sign 判断一个数到底是正数 负数 还是零</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">100</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">20000</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h3 id="十六、对象方法扩展"><a href="#十六、对象方法扩展" class="headerlink" title="十六、对象方法扩展"></a>十六、对象方法扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Object.is 判断两个值是否完全相等</span></span><br><span class="line"><span class="comment">// console.log(Object.is(120, 120)); // true</span></span><br><span class="line"><span class="comment">// console.log(Object.is(NaN, NaN)); // true</span></span><br><span class="line"><span class="comment">// console.log(NaN === NaN); // false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Object.assign 对象的合并</span></span><br><span class="line"><span class="keyword">const</span> config1 = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">pass</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">test</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;http://codeslive.top&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;33060&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiaokang&#x27;</span>,</span><br><span class="line">  <span class="attr">pass</span>: <span class="string">&#x27;iloveyou&#x27;</span>,</span><br><span class="line">  <span class="attr">test2</span>: <span class="string">&#x27;test2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(config1, config2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Object.setPrototypeOf 设置原型对象 Object.getPrototypeof</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小康&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cities = &#123;</span><br><span class="line">  <span class="attr">xiaoqu</span>: [<span class="string">&#x27;beijing&#x27;</span>, <span class="string">&#x27;shanghai&#x27;</span>, <span class="string">&#x27;shenzhen&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(school, cities);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(school));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br></pre></td></tr></table></figure><h3 id="十七、模块化"><a href="#十七、模块化" class="headerlink" title="十七、模块化"></a>十七、模块化</h3><h5 id="1-文件引入"><a href="#1-文件引入" class="headerlink" title="1. 文件引入"></a>1. 文件引入</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 通用的导入方式</span></span><br><span class="line"><span class="comment">//引入 m1.js 模块内容</span></span><br><span class="line"><span class="comment">// import * as m1 from &quot;./src/js/m1.js&quot;;</span></span><br><span class="line"><span class="comment">// //引入 m2.js 模块内容</span></span><br><span class="line"><span class="comment">// import * as m2 from &quot;./src/js/m2.js&quot;;</span></span><br><span class="line"><span class="comment">// //引入 m3.js </span></span><br><span class="line"><span class="comment">// import * as m3 from &quot;./src/js/m3.js&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 解构赋值形式</span></span><br><span class="line"><span class="comment">// import &#123;school, teach&#125; from &quot;./src/js/m1.js&quot;;</span></span><br><span class="line"><span class="comment">// import &#123;school as guigu, findJob&#125; from &quot;./src/js/m2.js&quot;;</span></span><br><span class="line"><span class="comment">// import &#123;default as m3&#125; from &quot;./src/js/m3.js&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 简便形式  针对默认暴露</span></span><br><span class="line"><span class="comment">// import m3 from &quot;./src/js/m3.js&quot;;</span></span><br><span class="line"><span class="comment">// console.log(m3);</span></span><br></pre></td></tr></table></figure><h5 id="2-babel转换"><a href="#2-babel转换" class="headerlink" title="2. babel转换"></a>2. babel转换</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        1. 安装工具 npm i babel-cli babel-preset-env browserify(webpack) -D</span></span><br><span class="line"><span class="comment">        2. 编译 npx babel src/js -d dist/js --presets=babel-preset-env</span></span><br><span class="line"><span class="comment">        3. 打包 npx browserify dist/js/app.js -o dist/bundle.js</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h2><h3 id="一、includes"><a href="#一、includes" class="headerlink" title="一、includes"></a>一、includes</h3><blockquote><p>说明：<code>includes()</code> 是 ES7 中新增的数组方法，用于判断数组中是否包含某个值，并返回一个布尔值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes </span></span><br><span class="line"><span class="keyword">const</span> mingzhu = [<span class="string">&#x27;西游记&#x27;</span>, <span class="string">&#x27;红楼梦&#x27;</span>, <span class="string">&#x27;三国演义&#x27;</span>, <span class="string">&#x27;水浒传&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mingzhu.<span class="title function_">includes</span>(<span class="string">&#x27;西游记&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mingzhu.<span class="title function_">includes</span>(<span class="string">&#x27;金瓶梅&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="二、双星号（-）"><a href="#二、双星号（-）" class="headerlink" title="二、双星号（**）"></a>二、双星号（**）</h3><blockquote><p>说明：在 ES7 中，<code>双星号（**）</code>是指数运算符。它可以用于计算某个数的幂次方</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> ** <span class="number">10</span>); <span class="comment">//1024</span></span><br></pre></td></tr></table></figure><h2 id="ES8"><a href="#ES8" class="headerlink" title="ES8"></a>ES8</h2><h3 id="一、async函数"><a href="#一、async函数" class="headerlink" title="一、async函数"></a>一、async函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async 函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  <span class="comment">// 返回一个字符串</span></span><br><span class="line">  <span class="comment">// return &#x27;xiaokang&#x27;;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回的结果不是一个 Promise 类型的对象, 返回的结果就是成功 Promise 对象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// return;  // fulfilled undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 抛出错误, 返回结果是一个失败的 Promise</span></span><br><span class="line">  <span class="comment">// throw new Error(&#x27;出错了&#x27;); // 报错并返回失败的promise对象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回的结果如果是一个 Promise 对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;成功的数据&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 then 方法</span></span><br><span class="line">result.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="二、await函数"><a href="#二、await函数" class="headerlink" title="二、await函数"></a>二、await函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 promise 对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;用户数据&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// await 要放在 async 函数中</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span> () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> p;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h3 id="三、async和await结合读取文件"><a href="#三、async和await结合读取文件" class="headerlink" title="三、async和await结合读取文件"></a>三、async和await结合读取文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 为学</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readWeiXue</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./resources/为学.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果失败</span></span><br><span class="line">      <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">      <span class="comment">// 如果成功</span></span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readChaYangShi</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./resources/插秧诗.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果失败</span></span><br><span class="line">      <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">      <span class="comment">// 如果成功</span></span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readGuanShu</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./resources/观书有感.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果失败</span></span><br><span class="line">      <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">      <span class="comment">// 如果成功</span></span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个 async 函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span> () &#123;</span><br><span class="line">  <span class="comment">// 获取为学内容</span></span><br><span class="line">  <span class="keyword">let</span> weixue = <span class="keyword">await</span> <span class="title function_">readWeiXue</span>();</span><br><span class="line">  <span class="comment">// 获取插秧诗的内容</span></span><br><span class="line">  <span class="keyword">let</span> chayang = <span class="keyword">await</span> <span class="title function_">readChaYangShi</span>();</span><br><span class="line">  <span class="comment">// 获取观书有感</span></span><br><span class="line">  <span class="keyword">let</span> guanshu = <span class="keyword">await</span> <span class="title function_">readGuanShu</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(weixue.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(chayang.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(guanshu.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四、async与await封装AJAX"><a href="#四、async与await封装AJAX" class="headerlink" title="四、async与await封装AJAX"></a>四、async与await封装AJAX</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 发送 AJAX 请求, 返回的结果是 Promise 对象</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sendAJAX</span> (url) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 1. 创建对象</span></span><br><span class="line">      <span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 初始化</span></span><br><span class="line">      x.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. 发送</span></span><br><span class="line">      x.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. 事件绑定</span></span><br><span class="line">      x.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (x.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; x.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">            <span class="comment">// 成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(x.<span class="property">response</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果失败</span></span><br><span class="line">            <span class="title function_">reject</span>(x.<span class="property">status</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// async 与 await 测试</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span> () &#123;</span><br><span class="line">    <span class="comment">// 发送 AJAX 请求</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">sendAJAX</span>(<span class="string">&#x27;https://b.codeslive.top/api/public/book/findFav5&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h3 id="五、对象方法扩展"><a href="#五、对象方法扩展" class="headerlink" title="五、对象方法扩展"></a>五、对象方法扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明对象</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiaokang&#x27;</span>,</span><br><span class="line">  <span class="attr">cities</span>: [<span class="string">&#x27;beijing&#x27;</span>, <span class="string">&#x27;shanghai&#x27;</span>, <span class="string">&#x27;shenzhen&#x27;</span>],</span><br><span class="line">  <span class="attr">xueke</span>: [<span class="string">&#x27;前端&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;大数据&#x27;</span>, <span class="string">&#x27;运维&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象所有的键</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(school));</span><br><span class="line"><span class="comment">// 获取对象所有的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(school));</span><br><span class="line"><span class="comment">// entries</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(school));</span><br><span class="line"><span class="comment">// 创建 Map</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(school));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&#x27;cities&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象属性描述对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(school));</span><br></pre></td></tr></table></figure><h2 id="ES9"><a href="#ES9" class="headerlink" title="ES9"></a>ES9</h2><h3 id="一、对象展开"><a href="#一、对象展开" class="headerlink" title="一、对象展开"></a>一、对象展开</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Rest 参数 spread 扩展运算符在 ES6 中已经引入, 不过ES6 中只针对于数组, 在 ES9 中对象提供了像数组一样的 rest 参数和扩展运算符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rest 参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span> (&#123; host, port, ...user &#125;) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;master&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象合并</span></span><br><span class="line"><span class="keyword">const</span> skillOne = &#123;</span><br><span class="line">  <span class="attr">q</span>: <span class="string">&#x27;天音波&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> skillTwo = &#123;</span><br><span class="line">  <span class="attr">w</span>: <span class="string">&#x27;金钟罩&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> skillThree = &#123;</span><br><span class="line">  <span class="attr">e</span>: <span class="string">&#x27;天雷破&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> skillFour = &#123;</span><br><span class="line">  <span class="attr">r</span>: <span class="string">&#x27;猛龙摆尾&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mangseng = &#123; ...skillOne, skillTwo, skillThree, skillFour &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mangseng);</span><br></pre></td></tr></table></figure><h3 id="二、正则命名分组"><a href="#二、正则命名分组" class="headerlink" title="二、正则命名分组"></a>二、正则命名分组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个字符串</span></span><br><span class="line"><span class="comment">// let str = `&lt;a href=&quot;https://codeslive.top&quot;&gt;小康&lt;/a&gt;`;</span></span><br><span class="line"><span class="comment">// // 提前 url 与 标签文本</span></span><br><span class="line"><span class="comment">// const reg = /&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/;</span></span><br><span class="line"><span class="comment">// // 执行</span></span><br><span class="line"><span class="comment">// const result = reg.exec(str);</span></span><br><span class="line"><span class="comment">// console.log(result);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;a href=&quot;https://codeslive.top&quot;&gt;小康&lt;/a&gt;`</span>;</span><br><span class="line"><span class="comment">// 分组命名</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span>;</span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">groups</span>.<span class="property">url</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">groups</span>.<span class="property">text</span>);</span><br></pre></td></tr></table></figure><h3 id="三、正则断言"><a href="#三、正则断言" class="headerlink" title="三、正则断言"></a>三、正则断言</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;JS5211314你知道么555啦啦啦&#x27;</span>;</span><br><span class="line"><span class="comment">// 正向断言</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/\d+(?=啦)/</span>;</span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向断言</span></span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="regexp">/(?&lt;=么)\d+/</span>;</span><br><span class="line"><span class="keyword">const</span> result2 = reg2.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2);</span><br></pre></td></tr></table></figure><h3 id="四、正则dotAll模式"><a href="#四、正则dotAll模式" class="headerlink" title="四、正则dotAll模式"></a>四、正则dotAll模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dot  .  元字符  除换行符以外的任意单个字符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;a&gt;阿甘正传&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br><span class="line"><span class="comment">//声明正则</span></span><br><span class="line"><span class="comment">// const reg = /&lt;li&gt;\s+&lt;a&gt;(.*?)&lt;\/a&gt;\s+&lt;p&gt;(.*?)&lt;\/p&gt;/;</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>s;</span><br><span class="line"><span class="comment">//执行匹配</span></span><br><span class="line"><span class="comment">// const result = reg.exec(str);</span></span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line"><span class="keyword">while</span>(result = reg.<span class="title function_">exec</span>(str))&#123;</span><br><span class="line">    data.<span class="title function_">push</span>(&#123;<span class="attr">title</span>: result[<span class="number">1</span>], <span class="attr">time</span>: result[<span class="number">2</span>]&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><h2 id="ES10"><a href="#ES10" class="headerlink" title="ES10"></a>ES10</h2><h3 id="一、Object-fromEntries"><a href="#一、Object-fromEntries" class="headerlink" title="一、Object.fromEntries"></a>一、Object.fromEntries</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二维数组 Object.fromEntries：数组转对象</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;xiaokang&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;xueke&#x27;</span>, <span class="string">&#x27;java,web&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象转数组 Object.entries ES8</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">entries</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiaokang&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 对象转数字</span></span><br></pre></td></tr></table></figure><h3 id="二、trimStart与trimEnd"><a href="#二、trimStart与trimEnd" class="headerlink" title="二、trimStart与trimEnd"></a>二、trimStart与trimEnd</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// trim</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;    iloveyou      &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimStart</span>()); <span class="comment">// 去除开始的空格</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimEnd</span>()); <span class="comment">// 去除结尾的空格</span></span><br></pre></td></tr></table></figure><h3 id="三、Array-prototype-flat与flatMap"><a href="#三、Array-prototype-flat与flatMap" class="headerlink" title="三、Array.prototype.flat与flatMap"></a>三、Array.prototype.flat与flatMap</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flat 平</span></span><br><span class="line"><span class="comment">// 将多维数组转换为低维数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">5</span>, <span class="number">6</span>]];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]];</span><br><span class="line"><span class="comment">// 参数为深度 是一个数字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// flatMap</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr3.<span class="title function_">flatMap</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h3 id="四、Symbol-prototype-description"><a href="#四、Symbol-prototype-description" class="headerlink" title="四、Symbol.prototype.description"></a>四、Symbol.prototype.description</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;小康&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>); <span class="comment">// 小康</span></span><br></pre></td></tr></table></figure><h2 id="ES11"><a href="#ES11" class="headerlink" title="ES11"></a>ES11</h2><h3 id="一、私有属性"><a href="#一、私有属性" class="headerlink" title="一、私有属性"></a>一、私有属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 共有属性</span></span><br><span class="line">  name;</span><br><span class="line">  <span class="comment">// 私有属性</span></span><br><span class="line">  #age;</span><br><span class="line">  #weight;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, weight</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.#age = age;</span><br><span class="line">    <span class="variable language_">this</span>.#weight = weight;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  intro () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#age);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#weight);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> girl = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;小康&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;45kg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl.<span class="property">name</span>);</span><br><span class="line"><span class="comment">// console.log(girl.#age); // 私有属性不可调用</span></span><br><span class="line">girl.<span class="title function_">intro</span>();</span><br></pre></td></tr></table></figure><h3 id="二、Promise-allSettled"><a href="#二、Promise-allSettled" class="headerlink" title="二、Promise.allSettled"></a>二、Promise.allSettled</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明两个 promise 对象</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;商品数据 - 1&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;商品数据 - 2&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 allsettled 方法</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2]); <span class="comment">// 返回状态和值</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2]); <span class="comment">// 返回值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h3 id="三、String-prototype-matchAll"><a href="#三、String-prototype-matchAll" class="headerlink" title="三、String.prototype.matchAll"></a>三、String.prototype.matchAll</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;a&gt;阿甘正传&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明正则</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/</span>sg;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="keyword">const</span> result = str.<span class="title function_">matchAll</span>(reg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for(let v of result)&#123;</span></span><br><span class="line"><span class="comment">//   console.log(v);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [...result];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h3 id="四、可选链操作符"><a href="#四、可选链操作符" class="headerlink" title="四、可选链操作符"></a>四、可选链操作符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ?.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span> (config) &#123;</span><br><span class="line">  <span class="comment">// const dbHost = config &amp;&amp; config.db &amp;&amp; config.db.host;</span></span><br><span class="line">  <span class="keyword">const</span> dbHost = config?.<span class="property">db</span>?.<span class="property">host</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dbHost);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>(&#123;</span><br><span class="line">  <span class="attr">db</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;192.168.1.100&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cache</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;192.168.1.200&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="五、动态import加载"><a href="#五、动态import加载" class="headerlink" title="五、动态import加载"></a>五、动态import加载</h3><ul><li>html</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;5-动态import加载&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button id=&quot;btn&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">  &lt;script src=&quot;./js/app.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>app.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import * as m1 from &quot;./hello.js&quot;;</span></span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;./hello.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">module</span>.<span class="title function_">hello</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hello.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hello</span> () &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、BigInt"><a href="#六、BigInt" class="headerlink" title="六、BigInt"></a>六、BigInt</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大整形</span></span><br><span class="line"><span class="comment">// let n = 521n;</span></span><br><span class="line"><span class="comment">// console.log(n, typeof(n));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="comment">// let n = 123;</span></span><br><span class="line"><span class="comment">// console.log(BigInt(n));</span></span><br><span class="line"><span class="comment">// console.log(BigInt(1.2));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//大数值运算</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max) + <span class="title class_">BigInt</span>(<span class="number">1</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max) + <span class="title class_">BigInt</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="七、globalThis"><a href="#七、globalThis" class="headerlink" title="七、globalThis"></a>七、globalThis</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">TypeScript学习笔记</summary>
    
    
    
    <category term="前端" scheme="https://codeslive.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
</feed>
